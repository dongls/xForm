(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{165:function(s,a){s.exports='<h1>XFormDesigner 表单设计器</h1> <p>该组件提供了一个图形化的表单设计器，用户可以通过拖拽的方式快速配置出表单。</p> <h2 id=基本用法 class="head-anchor article-sticky-heading"><a class=article-anchor href=#基本用法>¶</a> 基本用法</h2> <pre class=hljs language=html><code class=hljs-code><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>xform-designer</span> <span class=hljs-attr>v-model:schema</span>=<span class=hljs-string>&quot;schema&quot;</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>template</span> #<span class=hljs-attr>tool</span>&gt;</span><span class=hljs-comment>&lt;!-- 用于定制顶部工具条 --&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>template</span> #<span class=hljs-attr>setting</span>&gt;</span><span class=hljs-comment>&lt;!-- 用于定制表单设置 --&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>template</span> #<span class=hljs-attr>setting_type_text</span>&gt;</span><span class=hljs-comment>&lt;!-- 用于定制字段类型为text的字段设置 --&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>template</span> #<span class=hljs-attr>setting_name_test</span>&gt;</span><span class=hljs-comment>&lt;!-- 用于定制字段name为test的字段设置 --&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>xform-designer</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n<span class=hljs-keyword>import</span> { createSchema } <span class=hljs-keyword>from</span> <span class=hljs-string>&#x27;@dongls/xform&#x27;</span>;\n\n<span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n  setup(){\n    <span class=hljs-keyword>return</span> {\n      <span class=hljs-attr>schema</span>: createSchema()\n    }\n  }\n}\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n</code></pre> <h2 id=Props class="head-anchor article-sticky-heading"><a class=article-anchor href=#Props>¶</a> Props</h2> <h3>schema</h3> <ul class=doc-ul> <li><strong>类型</strong>：<code>XFormSchema</code><is-link path=/doc/model#XFormSchema></is-link></li> <li><strong>说明</strong>：设计器生成的表单配置，<strong>必须提供</strong>。 你可以使用<code>createSchema</code>方法创建它或者通过其他方式自行创建。需要注意的是，<strong><code>fields</code>的类型必须是<code>XField[]</code></strong>。<pre class=hljs language=javascript><code class=hljs-code><span class=hljs-keyword>import</span> {createSchema} <span class=hljs-keyword>from</span> <span class=hljs-string>&#x27;@dongls/xform&#x27;</span>;\n<span class=hljs-keyword>const</span> schema = createSchema({<span class=hljs-comment>/* 传入你的数据 */</span>});\n\n<span class=hljs-comment>// 如果是通过其他方式创建的对象，需要将fields做类型转换</span>\nschema.fields = schema.fields.map(<span class=hljs-function><span class=hljs-params>f</span> =&gt;</span> f <span class=hljs-keyword>instanceof</span> XField ? f : <span class=hljs-keyword>new</span> XField(f))\n</code></pre> </li> </ul> <h3>mode</h3> <ul class=doc-ul> <li><strong>类型</strong>：<code>string</code></li> <li><strong>默认值</strong>：<code>null</code></li> <li><strong>说明</strong>：如果您希望组件<strong>在不同的场景下展示不同的字段类型</strong>，您可以通过配置<code>modes</code>来定义多种模式来满足您的需求。 如果该属性的值为<code>null</code>，那么将显示所有注册的字段类型。例如：<pre class=hljs language=javascript><code class=hljs-code>app.use(XForm, {\n  <span class=hljs-attr>config</span>: {\n    <span class=hljs-attr>modes</span>: { \n      <span class=hljs-attr>example</span>: [ <span class=hljs-comment>// 字段类型分组</span>\n        { <span class=hljs-attr>title</span>: <span class=hljs-string>&#x27;分组1&#x27;</span>, <span class=hljs-attr>types</span>: [<span class=hljs-string>&#x27;type1&#x27;</span>, <span class=hljs-string>&#x27;type2&#x27;</span>] },\n        { <span class=hljs-attr>title</span>: <span class=hljs-string>&#x27;分组2&#x27;</span>, <span class=hljs-attr>types</span>: [<span class=hljs-string>&#x27;type3&#x27;</span>, <span class=hljs-string>&#x27;type4&#x27;</span>] }\n      ],\n      <span class=hljs-attr>simple</span>: [<span class=hljs-string>&#x27;type1&#x27;</span>, <span class=hljs-string>&#x27;type2&#x27;</span>, <span class=hljs-string>&#x27;type4&#x27;</span>]\n    }\n  }\n});\n</code></pre> 然后就可以在组件中使用<code>mode</code>属性来展示不同的字段类型。<pre class=hljs language=html><code class=hljs-code>  <span class=hljs-tag>&lt;<span class=hljs-name>xform-designer</span> <span class=hljs-attr>mode</span>=<span class=hljs-string>&quot;example&quot;</span>/&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>xform-designer</span> <span class=hljs-attr>mode</span>=<span class=hljs-string>&quot;simple&quot;</span>/&gt;</span>\n</code></pre> </li> </ul> <h2 id=Slots class="head-anchor article-sticky-heading"><a class=article-anchor href=#Slots>¶</a> Slots</h2> <h3>tool</h3> <p>用于定义组件顶部工具条。</p> <h3>setting</h3> <p>用于定制表单设置。需要注意的是，如果<code>preset.slots.setting</code>和该插槽都不存在的话，组件将不会显示表单设置。</p> <h3>setting_name_[[target]]</h3> <p>根据字段的<code>name</code>属性定制某一个字段的设置组件。</p> <pre class=hljs language=html><code class=hljs-code><span class=hljs-tag>&lt;<span class=hljs-name>xform-designer</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>template</span> #<span class=hljs-attr>setting_name_demo</span>=<span class=hljs-string>&quot;{field}&quot;</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>定制name值为demo的字段的设置组件<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>xform-designer</span>&gt;</span>\n</code></pre> <h3>setting_type_[[target]]</h3> <p>根据字段的<code>type</code>属性定制某一类型字段的设置组件。</p> <pre class=hljs language=html><code class=hljs-code><span class=hljs-tag>&lt;<span class=hljs-name>xform-designer</span> <span class=hljs-attr>v-model:schema</span>=<span class=hljs-string>&quot;schema&quot;</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>template</span> #<span class=hljs-attr>setting_type_text</span>=<span class=hljs-string>&quot;{field}&quot;</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span>&gt;</span>定制所有字段类型为text的字段的设置组件<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>xform-designer</span>&gt;</span>\n</code></pre> <h2 id=Events class="head-anchor article-sticky-heading"><a class=article-anchor href=#Events>¶</a> Events</h2> <h3>update:schema</h3> <p>表单数据表更时触发。</p> '}}]);