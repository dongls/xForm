(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{166:function(s,a){s.exports='<h1>XFormBuilder 表单生成器</h1> <p>该组件主要用于根据<code>XFormDesigner</code>生成的表单配置，渲染出对应的表单。</p> <h2 id=基本用法 class="head-anchor article-sticky-heading"><a class=article-anchor href=#基本用法>¶</a> 基本用法</h2> <pre class=hljs language=html><code class=hljs-code><span class=hljs-tag>&lt;<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>xform-builder</span> <span class=hljs-attr>ref</span>=<span class=hljs-string>&quot;builder&quot;</span> <span class=hljs-attr>v-model:value</span>=<span class=hljs-string>&quot;value&quot;</span> <span class=hljs-attr>:schema</span>=<span class=hljs-string>&quot;schema&quot;</span> @<span class=hljs-attr>submit.prevent</span>=<span class=hljs-string>&quot;submit&quot;</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>template</span> #<span class=hljs-attr>header</span>&gt;</span><span class=hljs-comment>&lt;!-- 定制表单顶部内容 --&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>template</span> #<span class=hljs-attr>footer</span>&gt;</span><span class=hljs-comment>&lt;!-- 定制表单底部内容，比如可以把提交按钮放在这 --&gt;</span><span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>xform-builder</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n\n<span class=hljs-tag>&lt;<span class=hljs-name>script</span>&gt;</span><span class=javascript>\n<span class=hljs-keyword>import</span> { reactive } <span class=hljs-keyword>from</span> <span class=hljs-string>&#x27;vue&#x27;</span>;\n<span class=hljs-keyword>import</span> { createSchema } <span class=hljs-keyword>from</span> <span class=hljs-string>&#x27;@dongls/xform&#x27;</span>;\n\n<span class=hljs-keyword>export</span> <span class=hljs-keyword>default</span> {\n  setup(){\n    <span class=hljs-keyword>const</span> instance = getCurrentInstance();\n\n    <span class=hljs-keyword>return</span> {\n      <span class=hljs-attr>schema</span>: createSchema({ <span class=hljs-comment>/* 表单配置 */</span> }),\n      <span class=hljs-attr>value</span>: reactive({ <span class=hljs-comment>/* 表单数据 */</span> }),\n      submit(){ \n        <span class=hljs-keyword>const</span> builder = instance.refs.builder;\n\n        <span class=hljs-keyword>return</span> builder.validate().then(<span class=hljs-function><span class=hljs-params>res</span> =&gt;</span> {\n          <span class=hljs-keyword>if</span>(res.valid) { <span class=hljs-comment>/* do submit */</span>}\n        });\n      }\n    }\n  }\n}\n</span><span class=hljs-tag>&lt;/<span class=hljs-name>script</span>&gt;</span>\n</code></pre> <h2 id=Props class="head-anchor article-sticky-heading"><a class=article-anchor href=#Props>¶</a> Props</h2> <h3><em>schema</em></h3> <ul class=doc-ul> <li><strong>类型</strong>：<code>XFormSchema</code><is-link path=/doc/model#XFormSchema></is-link></li> <li><strong>说明</strong>：表单的配置，数据来自表单设计器，<strong>必须提供</strong>。</li> </ul> <h3><em>value</em></h3> <ul class=doc-ul> <li><strong>类型</strong>：<code>object</code></li> <li><strong>说明</strong>：表单的值，<strong>必须提供</strong>。</li> </ul> <h3>tag</h3> <ul class=doc-ul> <li><strong>类型</strong>：<code>string</code>,</li> <li><strong>默认值</strong>：<code>form</code>,</li> <li><strong>说明</strong>：如果您想让<code>XFormBuilder</code>渲染为其他标签，比如将该组件作为放入一个已存在<code>form</code>表单中，就需要修改<code>tag</code>的值。</li> </ul> <h2 id=Slots class="head-anchor article-sticky-heading"><a class=article-anchor href=#Slots>¶</a> Slots</h2> <h3>header</h3> <p>用于定义组件顶部内容，例如您可以为表单添加一个标题。</p> <h3>footer</h3> <p>用于定义组件底部内容，例如您可以将表单提交按钮放在此处。</p> <h3>name_[[name]]</h3> <p>根据字段的<code>name</code>属性定制某一个字段的表单组件，例如：</p> <pre class=hljs language=html><code class=hljs-code><span class=hljs-tag>&lt;<span class=hljs-name>xform-builder</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>template</span> #<span class=hljs-attr>name_example</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>&quot;text&quot;</span> <span class=hljs-attr>placeholder</span>=<span class=hljs-string>&quot;name值为example的字段会如此渲染&quot;</span>/&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>xform-builder</span>&gt;</span>\n</code></pre> <h3>type_[[type]]</h3> <p>根据字段的<code>type</code>属性定制某一类字段类型的表单组件，例如：</p> <pre class=hljs language=html><code class=hljs-code><span class=hljs-tag>&lt;<span class=hljs-name>xform-builder</span>&gt;</span>\n  <span class=hljs-tag>&lt;<span class=hljs-name>template</span> #<span class=hljs-attr>type_text</span>&gt;</span>\n    <span class=hljs-tag>&lt;<span class=hljs-name>input</span> <span class=hljs-attr>type</span>=<span class=hljs-string>&quot;text&quot;</span> <span class=hljs-attr>placeholder</span>=<span class=hljs-string>&quot;所有type值为text的字段会如此渲染&quot;</span>/&gt;</span>\n  <span class=hljs-tag>&lt;/<span class=hljs-name>template</span>&gt;</span>\n<span class=hljs-tag>&lt;/<span class=hljs-name>xform-builder</span>&gt;</span>\n</code></pre> <h2 id=Events class="head-anchor article-sticky-heading"><a class=article-anchor href=#Events>¶</a> Events</h2> <h3>submit</h3> <p>当<code>tag</code>属性为<code>form</code>时，如果表单内存在提交按钮，会触发该原生事件。可以在此提交表单或者做其他需要的事情。</p> <h3>update:schema</h3> <p>表单数据表更时触发。</p> <h3>change</h3> <p>表单数据更新时触发。</p> '}}]);