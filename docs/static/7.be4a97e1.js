(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{169:function(s,n){s.exports='<h2 id=XField class="head-anchor article-sticky-heading"><a class=article-anchor href=#XField>¶</a> XField</h2> <p><code>XField</code>主要用于描述字段数据，保存用户对字段的配置。从数据库中取出的数据需要转成该类型才可被组件接受。</p> <pre class=hljs language=typescript><code class=hljs-code><span class=hljs-keyword>interface</span> XField{\n  <span class=hljs-keyword>type</span>: <span class=hljs-built_in>string</span>; <span class=hljs-comment>// 字段类型</span>\n  name: <span class=hljs-built_in>string</span>; <span class=hljs-comment>// 字段名，建议唯一</span>\n  title?: <span class=hljs-built_in>string</span>; <span class=hljs-comment>// 字段标题</span>\n  placeholder?: <span class=hljs-built_in>string</span>; <span class=hljs-comment>// 是否必填</span>\n  required?: <span class=hljs-built_in>boolean</span>; <span class=hljs-comment>// 选项</span>\n  options?: <span class=hljs-built_in>any</span>[];\n  \n  attributes?: { <span class=hljs-comment>// 自定义属性，可自行添加所需属性</span>\n    [prop: <span class=hljs-built_in>string</span>]: <span class=hljs-built_in>any</span>;\n    remove?: <span class=hljs-built_in>boolean</span>; <span class=hljs-comment>// 是否允许字段被删除</span>\n  };  \n  \n  <span class=hljs-comment>// 字段缓存，不可枚举</span>\n  storage: {\n    fieldConf: XFieldConf;\n  }\n\n  <span class=hljs-comment>// 设计器相关属性，不可枚举</span>\n  designer: {\n    [prop: <span class=hljs-built_in>string</span>]: <span class=hljs-built_in>any</span>;\n    dragging: <span class=hljs-built_in>boolean</span>; <span class=hljs-comment>// 字段是否正在被拖拽</span>\n  };\n\n  <span class=hljs-comment>// 查询字段对应的字段配置</span>\n  findFieldConf(): XFieldConf | <span class=hljs-literal>null</span>;\n  <span class=hljs-comment>// 复制该字段，name属性除外</span>\n  copy(): XField;\n}\n</code></pre> <h2 id=XFieldConf class="head-anchor article-sticky-heading"><a class=article-anchor href=#XFieldConf>¶</a> XFieldConf</h2> <p><code>XFieldConf</code>主要用于描述字段类型的配置，例如字段该如何渲染、验证等。<code>Ref</code>和<code>ComponentOptions</code>都是由<code>Vue</code>提供的类型。</p> <pre class=hljs language=typescript><code class=hljs-code><span class=hljs-keyword>type</span> ModeCompontFunc = <span class=hljs-function>(<span class=hljs-params>field: XField, mode: <span class=hljs-built_in>string</span></span>) =&gt;</span> ComponentOptions | VNode;\n<span class=hljs-keyword>type</span> XFieldConfComponent = ComponentOptions | ModeCompontFunc;\n\n<span class=hljs-keyword>interface</span> XFieldConf {\n  <span class=hljs-keyword>type</span>: <span class=hljs-built_in>string</span>; <span class=hljs-comment>// 字段类型</span>\n  title: <span class=hljs-built_in>string</span>; <span class=hljs-comment>// 字段名</span>\n  icon?: <span class=hljs-built_in>string</span> | <span class=hljs-built_in>Function</span>; <span class=hljs-comment>// 字段icon</span>\n  custom?: <span class=hljs-built_in>boolean</span>;\n  attributes?: <span class=hljs-built_in>object</span> | <span class=hljs-built_in>Function</span>;\n  extension?: <span class=hljs-built_in>object</span>;\n\n  setting?: XFieldConfComponent;\n  preview?: XFieldConfComponent;\n  build?: XFieldConfComponent;\n  view?: XFieldConfComponent\n\n  <span class=hljs-comment>// 字段验证器</span>\n  validator?: <span class=hljs-function>(<span class=hljs-params>\n    field: XField, \n    value: <span class=hljs-built_in>any</span>, \n    model: <span class=hljs-built_in>any</span>, \n    context: { validating: Ref&lt;<span class=hljs-built_in>Boolean</span>&gt;, message: Ref&lt;<span class=hljs-built_in>string</span>&gt;}\n  </span>) =&gt;</span> <span class=hljs-built_in>Promise</span>;\n}\n</code></pre> <h2 id=XFormSchema class="head-anchor article-sticky-heading"><a class=article-anchor href=#XFormSchema>¶</a> XFormSchema</h2> <p><code>XFormSchema</code>主要用于描述表单配置数据。数据来源于表单设计器，可序列化后存入数据库。<code>xForm</code>就是依据它渲染表单。</p> <pre class=hljs language=typescript><code class=hljs-code><span class=hljs-keyword>interface</span> XFormSchema {\n  [propName: <span class=hljs-built_in>string</span>]: <span class=hljs-built_in>any</span>;\n  fields: XField[];\n  labelSuffix?: <span class=hljs-built_in>string</span>;\n  labelPosition?: <span class=hljs-built_in>string</span>;\n  viewerPlaceholder?: <span class=hljs-built_in>string</span>;\n}\n</code></pre> '}}]);